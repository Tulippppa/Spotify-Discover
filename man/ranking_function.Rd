% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ranking_function.R
\name{ranking_function}
\alias{ranking_function}
\title{This function takes a playlist and sorts it by an element that the user wants}
\usage{
ranking_function(
  playlist,
  access_token,
  sort_by = "track.name",
  order = "ascending",
  test = FALSE
)
}
\arguments{
\item{playlist}{The playlist URI the user wants artist recommendations from}

\item{access_token}{The API key the user generates from their secret ID and Password so they can access the Spotify API}

\item{sort_by}{The column the user would like to sort_by/organize their playlist by}

\item{order}{Can organize playlist in ascending or descending order}

\item{test}{If set to TRUE, will return test data of Spotify Top 50 with all default parameters. If FALSE, users can input their own playlist URI}
}
\value{
Returns a dataframe that will always have "track.name" and "simple_artist" (name of the artist(s) on the song), and will have an additional column if what they want to sort_by is not "track.name" or "track.artist". Sorting by "track.name" is the default
}
\description{
This function takes a playlist and sorts it by an element that the user wants
}
\examples{
ranking_function('37i9dQZEVXbLRQDuF5jeBp', test=TRUE)
# An example using a playlist with default parameters of sorting
# by track name in ascending order

# When you want to run your own artists, you will replace test = TRUE'
# with your access token.


ranking_function('37i9dQZEVXbLRQDuF5jeBp', test=TRUE, sort_by="track.popularity")
# An example using a playlist to sort by track popularity in ascending order

# If you would like to return test data, please set test = TRUE
}
